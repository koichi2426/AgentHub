version: '3.8'

services:
  # ---------------------------------
  # フロントエンドサービス (Next.js)
  # ---------------------------------
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
        - API_URL_INTERNAL=${API_URL_INTERNAL}
    container_name: agenthub_frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - API_URL_INTERNAL=${API_URL_INTERNAL}

  # ---------------------------------
  # キューブローカーサービス (Redis)
  # ---------------------------------
  redis:
    image: redis:7-alpine
    container_name: agenthub_redis
    expose:
      - "6379" # 内部ポートのみ公開
    volumes:
      - redis_data:/data 
    restart: unless-stopped

  # ---------------------------------
  # バックエンドサービス (FastAPI)
  # ---------------------------------
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: agenthub_backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      # --- Mount SSH Key (Read-Only) ---
      - ${VPS_KEY_HOST_PATH}:${VPS_KEY_FILE_PATH}:ro
    depends_on:
      db:
        condition: service_healthy
      redis: # Redisへの依存を追加
        condition: service_started
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: ${ALGORITHM}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL} # .envから読み込み
      # --- SFTP Storage Settings ---
      VPS_IP: ${VPS_IP}
      VPS_USER: ${VPS_USER}
      VPS_ACCOUNT_PASSWORD: ${VPS_ACCOUNT_PASSWORD} # <-- 追加
      VPS_KEY_FILE_PATH: ${VPS_KEY_FILE_PATH}
      # Set defaults for optional vars to suppress warnings
      VPS_PORT: ${VPS_PORT:-22}
      VPS_TRAINING_DIR: ${VPS_TRAINING_DIR:-/home/${VPS_USER}/training_data}
      VPS_MODEL_DIR: ${VPS_MODEL_DIR:-/home/${VPS_USER}/models}
    restart: unless-stopped

  # ---------------------------------
  # ワーカーサービス (Celery)
  # ---------------------------------
  celery_worker:
    build:
      context: ./worker # 独立したworkerフォルダを使用
      dockerfile: Dockerfile
    container_name: agenthub_celery_worker
    # Celeryアプリのエントリーポイントと単一実行を保証するコマンド
    command: celery -A worker.celery_app worker -l info --pool=solo --max-tasks-per-child=1
    volumes:
      - ./worker:/app/worker
      # --- Mount SSH Key (Read-Only) ---
      - ${VPS_KEY_HOST_PATH}:${VPS_KEY_FILE_PATH}:ro
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      # DB接続情報はワーカーのリポジトリ層で使用
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      # CeleryがRedisと通信するための設定 (.envから読み込み)
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
      CELERY_TASK_TIME_LIMIT: ${CELERY_TASK_TIME_LIMIT}
      CELERY_TASK_MAX_RETRIES: ${CELERY_TASK_MAX_RETRIES}
      # --- SFTP Storage Settings ---
      VPS_IP: ${VPS_IP}
      VPS_USER: ${VPS_USER}
      VPS_ACCOUNT_PASSWORD: ${VPS_ACCOUNT_PASSWORD} # <-- 追加
      VPS_KEY_FILE_PATH: ${VPS_KEY_FILE_PATH}
      # Set defaults for optional vars to suppress warnings
      VPS_PORT: ${VPS_PORT:-22}
      VPS_TRAINING_DIR: ${VPS_TRAINING_DIR:-/home/${VPS_USER}/training_data}
      VPS_MODEL_DIR: ${VPS_MODEL_DIR:-/home/${VPS_USER}/models}
    restart: unless-stopped
    
  # ---------------------------------
  # ジョブ監視サービス (Celery Flower) - ★ NEW ★
  # ---------------------------------
  celery_flower:
    image: mher/flower:latest
    container_name: agenthub_celery_flower
    ports:
      - "5555:5555" # ホストの5555ポートでFlower UIにアクセス
    environment:
      CELERY_BROKER_URL: ${CELERY_BROKER_URL} 
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
    depends_on:
      - redis
      - celery_worker
    restart: unless-stopped

  # ---------------------------------
  # データベースサービス (MySQL)
  # ---------------------------------
  db:
    image: mysql:8.0
    container_name: agenthub_db
    environment:
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
    ports:
      - "${DB_PORT}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

# ---------------------------------
# 名前付きボリュームの定義
# ---------------------------------
volumes:
  mysql_data:
  redis_data:

